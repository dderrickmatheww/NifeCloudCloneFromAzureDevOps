generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business_events {
  eventId      Int         @id @default(autoincrement())
  businessId   Int?
  businessUID  String      @db.VarChar
  lastModified DateTime?   @db.Timestamp(6)
  created      DateTime?   @db.Timestamp(6)
  userId       Int?
  eventtype    eventtype?
  description  String?     @db.VarChar
  businesses   businesses? @relation(fields: [businessId], references: [businessId], onDelete: NoAction, onUpdate: NoAction)
  users        users?      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model businesses {
  userId          Int?
  businessUID     String            @unique @db.VarChar
  lastModified    DateTime?         @db.Timestamp(6)
  created         DateTime?         @db.Timestamp(6)
  address         String?           @db.VarChar
  email           String?           @db.VarChar
  displayName     String?           @db.VarChar
  phoneNumber     String?           @db.VarChar
  latitude        String?           @db.VarChar
  longitude       String?           @db.VarChar
  ownerName       String?           @db.VarChar
  photoSource     String?           @db.VarChar
  lastLogin       DateTime?         @db.Timestamp(6)
  businessId      Int               @id @default(autoincrement())
  users           users?            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  business_events business_events[]
  user_posts      user_posts[]
}

model user_favorite_places {
  placesId     Int       @id @default(autoincrement())
  userId       Int?
  businessUID  String    @db.VarChar
  businessId   Int?
  displayName  String?   @db.VarChar
  lastModified DateTime? @db.Timestamp(6)
  created      DateTime? @db.Timestamp(6)
  users        users?    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model user_friends {
  friendshipId Int       @id @default(autoincrement())
  userId       Int?
  friendId     Int
  isFriend     String?   @default(dbgenerated("'1'::\"bit\"")) @db.Bit(1)
  isBlocked    String?   @default(dbgenerated("'0'::\"bit\"")) @db.Bit(1)
  lastModified DateTime? @db.Timestamp(6)
  created      DateTime? @db.Timestamp(6)
  users        users?    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model user_posts {
  postId      Int         @id @default(autoincrement())
  latitude    String?     @db.VarChar
  longitude   String?     @db.VarChar
  description String?     @db.VarChar
  userId      Int?
  businessId  Int?
  image       String?     @db.VarChar
  created     DateTime?   @db.Timestamp(6)
  businesses  businesses? @relation(fields: [businessId], references: [businessId], onDelete: NoAction, onUpdate: NoAction)
  users       users?      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model users {
  userId               Int                    @id @default(autoincrement())
  bio                  String?                @db.VarChar
  dateOfBirth          String?                @db.VarChar
  displayName          String?                @db.VarChar
  email                String?                @unique(map: "unique_email") @db.VarChar
  expoPushToken        String?                @db.VarChar
  gender               String?                @db.VarChar
  phoneNumber          String?                @db.VarChar
  photoSource          String?                @db.VarChar
  sexualOrientation    String?                @db.VarChar
  userUID              String?                @db.VarChar
  businessId           Int?
  latitude             String?                @db.VarChar
  longitude            String?                @db.VarChar
  lastModified         DateTime?              @db.Timestamp(6)
  lastLogin            DateTime?              @db.Timestamp(6)
  created              DateTime?              @db.Timestamp(6)
  businessUID          String?                @db.VarChar
  business_events      business_events[]
  businesses           businesses[]
  user_favorite_places user_favorite_places[]
  user_friends         user_friends[]
  user_posts           user_posts[]
}

enum eventtype {
  Special
  Event
}
