generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business_events {
  eventId      Int        @id @default(autoincrement())
  business     String     @db.VarChar
  lastModified DateTime?  @db.Timestamp(6)
  created      DateTime?  @db.Timestamp(6)
  type         eventtype?
  description  String?    @db.VarChar
  user         String?    @db.VarChar
  businesses   businesses @relation(fields: [business], references: [uuid], onDelete: Cascade)
}

model businesses {
  userId          Int?
  uuid            String            @unique(map: "businesses_businessUID_key") @db.VarChar
  lastModified    DateTime?         @db.Timestamp(6)
  created         DateTime?         @db.Timestamp(6)
  email           String?           @db.VarChar
  displayName     String?           @db.VarChar
  phoneNumber     String?           @db.VarChar
  ownerName       String?           @db.VarChar
  photoSource     String?           @db.VarChar
  lastLogin       DateTime?         @db.Timestamp(6)
  businessId      Int               @id @default(autoincrement())
  street          String?           @db.VarChar
  city            String?           @db.VarChar
  zip             String?           @db.VarChar
  country         String?           @db.VarChar
  state           String?           @db.VarChar
  latitude        Float?
  longitude       Float?
  proofOfAddress  String?           @db.VarChar
  users           users?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  business_events business_events[]
  user_posts      user_posts[]
}

model user_favorite_places {
  id           Int       @id @default(autoincrement())
  created      DateTime? @db.Timestamp(6)
  business     String?   @db.VarChar
  businessName String?   @db.VarChar
  user         Int?
  users        users?    @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_favorite_places_user")

  @@index([user], map: "fki_user_favorite_places_user")
}

model user_friends {
  id                                 Int       @id @default(autoincrement())
  userId                             Int?
  friendId                           Int
  created                            DateTime? @db.Timestamptz(6)
  lastModified                       DateTime? @db.Timestamptz(6)
  isBlocked                          Boolean?  @default(false)
  isFriend                           Boolean?  @default(false)
  isRequest                          Boolean?  @default(true)
  users_user_friends_friendIdTousers users     @relation("user_friends_friendIdTousers", fields: [friendId], references: [id], onDelete: Cascade)
  users                              users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_posts {
  id          Int         @id @default(autoincrement())
  description String?     @db.VarChar
  userId      Int?
  businessId  Int?
  image       String?     @db.VarChar
  created     DateTime?   @db.Timestamp(6)
  isFlagged   String?     @db.Bit(1)
  type        String?     @db.VarChar
  latitude    Float?
  longitude   Float?
  businesses  businesses? @relation(fields: [businessId], references: [businessId], onDelete: NoAction, onUpdate: NoAction)
  users       users?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                                        Int                    @id @default(autoincrement())
  bio                                       String?                @db.VarChar
  dateOfBirth                               String?                @db.VarChar
  displayName                               String?                @db.VarChar
  email                                     String?                @unique(map: "unique_email") @db.VarChar
  expoPushToken                             String?                @db.VarChar
  gender                                    String?                @db.VarChar
  phoneNumber                               String?                @db.VarChar
  photoSource                               String?                @db.VarChar
  sexualOrientation                         String?                @db.VarChar
  uuid                                      String?                @unique(map: "user_unique_uuid") @db.VarChar
  businessId                                Int?
  lastModified                              DateTime?              @db.Timestamp(6)
  lastLogin                                 DateTime?              @db.Timestamp(6)
  created                                   DateTime?              @db.Timestamp(6)
  businessUID                               String?                @db.VarChar
  isFlagged                                 String?                @db.Bit(1)
  latitude                                  Float?
  longitude                                 Float?
  eula                                      Boolean?
  businesses                                businesses[]
  user_check_ins                            user_check_ins?
  user_favorite_drinks                      user_favorite_drinks[]
  user_favorite_places                      user_favorite_places[]
  user_friends_user_friends_friendIdTousers user_friends[]         @relation("user_friends_friendIdTousers")
  user_friends                              user_friends[]
  user_last_visited                         user_last_visited[]
  user_posts                                user_posts[]
}

model user_check_ins {
  id           Int       @id @default(autoincrement())
  created      DateTime? @db.Timestamp(6)
  isPrivate    Boolean?
  user         Int?      @unique(map: "unique_check_in_user")
  business     String?   @db.VarChar
  businessName String?   @db.VarChar
  users        users?    @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_check_ins_user")

  @@index([user], map: "fki_user_check_ins_user")
}

model user_last_visited {
  business     String?   @db.VarChar
  created      DateTime? @db.Timestamp(6)
  isPrivate    Boolean?
  user         Int?
  id           Int       @id @default(autoincrement())
  businessName String?   @db.VarChar
  users        users?    @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_favorite_drinks {
  id          Int       @id @default(autoincrement())
  user        Int?
  description String?   @db.VarChar
  created     DateTime? @default(now()) @db.Date
  users       users?    @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorite_drinks_user")

  @@index([user], map: "fki_favorite_drinks_user")
}

enum eventtype {
  Special
  Event
}
